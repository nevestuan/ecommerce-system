name: Product Engine CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'product-engine/**'
      - '.github/workflows/product-engine.yaml'
  workflow_dispatch:

env:
  ACR_NAME: ecommercedev20240319acr
  IMAGE_NAME: product-engine
  RESOURCE_GROUP: ecommerce-rg
  CLUSTER_NAME: ecommerce-dev-aks
  NAMESPACE: ecommerce
  SERVICE_PATH: product-engine

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push image
      working-directory: ${{ env.SERVICE_PATH }}/src
      run: |
        IMAGE_TAG=$(date +%Y%m%d.%H%M%S)
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG -f ProductEngine.FnApp/Dockerfile .
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up kubectl
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create/Update Storage Secret
      run: |
        kubectl create secret generic product-engine-secrets \
          --namespace ${{ env.NAMESPACE }} \
          --from-literal=AzureWebJobsStorage=${{ secrets.AZURE_WEBJOBS_STORAGE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        sed -i "s/\${ACR_NAME}/${{ env.ACR_NAME }}/g" k8s/deployment.yaml
        sed -i "s/\${IMAGE_TAG}/${{ env.IMAGE_TAG }}/g" k8s/deployment.yaml
        kubectl apply -f k8s/deployment.yaml 